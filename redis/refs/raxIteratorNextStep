<def f='codebrowser/src/rax.c' l='1176' ll='1268' type='int raxIteratorNextStep(raxIterator * it, int noup)'/>
<use f='codebrowser/src/rax.c' l='1477' u='c' c='raxSeek'/>
<use f='codebrowser/src/rax.c' l='1491' u='c' c='raxSeek'/>
<use f='codebrowser/src/rax.c' l='1495' u='c' c='raxSeek'/>
<use f='codebrowser/src/rax.c' l='1521' u='c' c='raxSeek'/>
<use f='codebrowser/src/rax.c' l='1537' u='c' c='raxNext'/>
<doc f='codebrowser/src/rax.c' l='1162'>/* Do an iteration step towards the next element. At the end of the step the
 * iterator key will represent the (new) current key. If it is not possible
 * to step in the specified direction since there are no longer elements, the
 * iterator is flagged with RAX_ITER_EOF.
 *
 * If &apos;noup&apos; is true the function starts directly scanning for the next
 * lexicographically smaller children, and the current node is already assumed
 * to be the parent of the last key node, so the first operation to go back to
 * the parent will be skipped. This option is used by raxSeek() when
 * implementing seeking a non existing element with the &quot;&gt;&quot; or &quot;&lt;&quot; options:
 * the starting node is not a key in that particular case, so we start the scan
 * from a node that does not represent the key set.
 *
 * The function returns 1 on success or 0 on out of memory. */</doc>
