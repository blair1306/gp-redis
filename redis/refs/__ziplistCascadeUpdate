<def f='codebrowser/src/ziplist.c' l='616' ll='675' type='unsigned char * __ziplistCascadeUpdate(unsigned char * zl, unsigned char * p)'/>
<use f='codebrowser/src/ziplist.c' l='737' u='c' c='__ziplistDelete'/>
<use f='codebrowser/src/ziplist.c' l='825' u='c' c='__ziplistInsert'/>
<use f='codebrowser/src/ziplist.c' l='941' u='c' c='ziplistMerge'/>
<doc f='codebrowser/src/ziplist.c' l='596'>/* When an entry is inserted, we need to set the prevlen field of the next
 * entry to equal the length of the inserted entry. It can occur that this
 * length cannot be encoded in 1 byte and the next entry needs to be grow
 * a bit larger to hold the 5-byte encoded prevlen. This can be done for free,
 * because this only happens when an entry is already being inserted (which
 * causes a realloc and memmove). However, encoding the prevlen may require
 * that this entry is grown as well. This effect may cascade throughout
 * the ziplist when there are consecutive entries with a size close to
 * ZIP_BIG_PREVLEN, so we need to check that the prevlen can be encoded in
 * every consecutive entry.
 *
 * Note that this effect can also happen in reverse, where the bytes required
 * to encode the prevlen field can shrink. This effect is deliberately ignored,
 * because it can cause a &quot;flapping&quot; effect where a chain prevlen fields is
 * first grown and then shrunk again after consecutive inserts. Rather, the
 * field is allowed to stay larger than necessary, because a large prevlen
 * field implies the ziplist is holding large entries anyway.
 *
 * The pointer &quot;p&quot; points to the first entry that does NOT need to be
 * updated, i.e. consecutive fields MAY need an update. */</doc>
