<dec f='codebrowser/src/util.h' l='38' type='long long memtoll(const char * p, int * err)'/>
<use f='codebrowser/src/config.c' l='317' u='c' c='loadServerConfigFromString'/>
<use f='codebrowser/src/config.c' l='375' u='c' c='loadServerConfigFromString'/>
<use f='codebrowser/src/config.c' l='474' u='c' c='loadServerConfigFromString'/>
<use f='codebrowser/src/config.c' l='519' u='c' c='loadServerConfigFromString'/>
<use f='codebrowser/src/config.c' l='537' u='c' c='loadServerConfigFromString'/>
<use f='codebrowser/src/config.c' l='539' u='c' c='loadServerConfigFromString'/>
<use f='codebrowser/src/config.c' l='549' u='c' c='loadServerConfigFromString'/>
<use f='codebrowser/src/config.c' l='551' u='c' c='loadServerConfigFromString'/>
<use f='codebrowser/src/config.c' l='553' u='c' c='loadServerConfigFromString'/>
<use f='codebrowser/src/config.c' l='555' u='c' c='loadServerConfigFromString'/>
<use f='codebrowser/src/config.c' l='662' u='c' c='loadServerConfigFromString'/>
<use f='codebrowser/src/config.c' l='663' u='c' c='loadServerConfigFromString'/>
<use f='codebrowser/src/config.c' l='954' u='c' c='configSetCommand'/>
<use f='codebrowser/src/config.c' l='810' u='c' c='configSetCommand'/>
<use f='codebrowser/src/config.c' l='810' u='c' c='configSetCommand'/>
<use f='codebrowser/src/config.c' l='810' u='c' c='configSetCommand'/>
<use f='codebrowser/src/config.c' l='810' u='c' c='configSetCommand'/>
<def f='codebrowser/src/util.c' l='180' ll='230' type='long long memtoll(const char * p, int * err)'/>
<doc f='codebrowser/src/util.c' l='173'>/* Convert a string representing an amount of memory into the number of
 * bytes, so for instance memtoll(&quot;1Gb&quot;) will return 1073741824 that is
 * (1024*1024*1024).
 *
 * On parsing error, if *err is not NULL, it&apos;s set to 1, otherwise it&apos;s
 * set to 0. On error the function return value is 0, regardless of the
 * fact &apos;err&apos; is NULL or not. */</doc>
