<dec f='codebrowser/src/server.h' l='1726' type='robj * dbUnshareStringValue(redisDb * db, robj * key, robj * o)'/>
<use f='codebrowser/src/bitops.c' l='487' u='c' c='lookupStringForBitCommand'/>
<def f='codebrowser/src/db.c' l='284' ll='293' type='robj * dbUnshareStringValue(redisDb * db, robj * key, robj * o)'/>
<doc f='codebrowser/src/db.c' l='257'>/* Prepare the string object stored at &apos;key&apos; to be modified destructively
 * to implement commands like SETBIT or APPEND.
 *
 * An object is usually ready to be modified unless one of the two conditions
 * are true:
 *
 * 1) The object &apos;o&apos; is shared (refcount &gt; 1), we don&apos;t want to affect
 *    other users.
 * 2) The object encoding is not &quot;RAW&quot;.
 *
 * If the object is found in one of the above conditions (or both) by the
 * function, an unshared / not-encoded copy of the string object is stored
 * at &apos;key&apos; in the specified &apos;db&apos;. Otherwise the object &apos;o&apos; itself is
 * returned.
 *
 * USAGE:
 *
 * The object &apos;o&apos; is what the caller already obtained by looking up &apos;key&apos;
 * in &apos;db&apos;, the usage pattern looks like this:
 *
 * o = lookupKeyWrite(db,key);
 * if (checkType(c,o,OBJ_STRING)) return;
 * o = dbUnshareStringValue(db,key,o);
 *
 * At this point the caller is ready to modify the object, for example
 * using an sdscat() call to append some data, or anything else.
 */</doc>
<use f='codebrowser/src/hyperloglog.c' l='1163' u='c' c='pfaddCommand'/>
<use f='codebrowser/src/hyperloglog.c' l='1237' u='c' c='pfcountCommand'/>
<use f='codebrowser/src/hyperloglog.c' l='1314' u='c' c='pfmergeCommand'/>
<use f='codebrowser/src/hyperloglog.c' l='1461' u='c' c='pfdebugCommand'/>
<use f='codebrowser/src/module.c' l='1539' u='c' c='RM_StringDMA'/>
<use f='codebrowser/src/module.c' l='1574' u='c' c='RM_StringTruncate'/>
<use f='codebrowser/src/t_string.c' l='230' u='c' c='setrangeCommand'/>
<use f='codebrowser/src/t_string.c' l='458' u='c' c='appendCommand'/>
