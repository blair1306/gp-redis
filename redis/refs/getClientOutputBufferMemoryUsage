<dec f='codebrowser/src/server.h' l='1372' type='unsigned long getClientOutputBufferMemoryUsage(client * c)'/>
<use f='codebrowser/src/evict.c' l='368' u='c' c='freeMemoryGetNotCountedMemory'/>
<use f='codebrowser/src/networking.c' l='1534' u='c' c='catClientInfoString'/>
<def f='codebrowser/src/networking.c' l='1813' ll='1819' type='unsigned long getClientOutputBufferMemoryUsage(client * c)'/>
<use f='codebrowser/src/networking.c' l='1864' u='c' c='checkClientOutputBufferLimits'/>
<doc f='codebrowser/src/networking.c' l='1800'>/* This function returns the number of bytes that Redis is virtually
 * using to store the reply still not read by the client.
 * It is &quot;virtual&quot; since the reply output list may contain objects that
 * are shared and are not really using additional memory.
 *
 * The function returns the total sum of the length of all the objects
 * stored in the output list, plus the memory used to allocate every
 * list node. The static reply buffer is not taken into account since it
 * is allocated anyway.
 *
 * Note: this function is very fast so can be called as many time as
 * the caller wishes. The main usage of this function currently is
 * enforcing the client output length limits. */</doc>
<use f='codebrowser/src/object.c' l='838' u='c' c='getMemoryOverheadData'/>
<use f='codebrowser/src/object.c' l='856' u='c' c='getMemoryOverheadData'/>
