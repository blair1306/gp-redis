<dec f='codebrowser/src/dict.h' l='158' type='dictEntry * dictUnlink(dict * ht, const void * key)'/>
<def f='codebrowser/src/dict.c' l='428' ll='430' type='dictEntry * dictUnlink(dict * ht, const void * key)'/>
<doc f='codebrowser/src/dict.c' l='407'>/* Remove an element from the table, but without actually releasing
 * the key, value and dictionary entry. The dictionary entry is returned
 * if the element was found (and unlinked from the table), and the user
 * should later call `dictFreeUnlinkedEntry()` with it in order to release it.
 * Otherwise if the key is not found, NULL is returned.
 *
 * This function is useful when we want to remove something from the hash
 * table but want to use its value before actually deleting the entry.
 * Without this function the pattern would require two lookups:
 *
 *  entry = dictFind(...);
 *  // Do something with entry
 *  dictDelete(dictionary,entry);
 *
 * Thanks to this function it is possible to avoid this, and use
 * instead:
 *
 * entry = dictUnlink(dictionary,entry);
 * // Do something with entry
 * dictFreeUnlinkedEntry(entry); // &lt;- This does not need to lookup again.
 */</doc>
<use f='codebrowser/src/lazyfree.c' l='62' u='c' c='dbAsyncDelete'/>
<use f='codebrowser/src/t_zset.c' l='1390' u='c' c='zsetDel'/>
