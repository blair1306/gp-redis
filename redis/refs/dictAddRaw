<dec f='codebrowser/src/dict.h' l='154' type='dictEntry * dictAddRaw(dict * d, void * key, dictEntry ** existing)'/>
<use f='codebrowser/src/dict.c' l='267' u='c' c='dictAdd'/>
<def f='codebrowser/src/dict.c' l='292' ll='318' type='dictEntry * dictAddRaw(dict * d, void * key, dictEntry ** existing)'/>
<use f='codebrowser/src/dict.c' l='331' u='c' c='dictReplace'/>
<use f='codebrowser/src/dict.c' l='357' u='c' c='dictAddOrFind'/>
<doc f='codebrowser/src/dict.c' l='274'>/* Low level add or find:
 * This function adds the entry but instead of setting a value returns the
 * dictEntry structure to the user, that will make sure to fill the value
 * field as he wishes.
 *
 * This function is also directly exposed to the user API to be called
 * mainly in order to store non-pointers inside the hash value, example:
 *
 * entry = dictAddRaw(dict,mykey,NULL);
 * if (entry != NULL) dictSetSignedIntegerVal(entry,1000);
 *
 * Return values:
 *
 * If key already exists NULL is returned, and &quot;*existing&quot; is populated
 * with the existing entry if existing is not NULL.
 *
 * If key was added, the hash entry is returned to be manipulated by the caller.
 */</doc>
<use f='codebrowser/src/sentinel.c' l='3646' u='c' c='sentinelLeaderIncr'/>
<use f='codebrowser/src/t_set.c' l='56' u='c' c='setTypeAdd'/>
<use f='codebrowser/src/t_zset.c' l='2285' u='c' c='zunionInterGenericCommand'/>
